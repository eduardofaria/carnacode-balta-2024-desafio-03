@page "/"
@using System.Globalization
@layout MainLayout

<PageTitle>IMC</PageTitle>



    <h1 class="page_title">Cálculo de IMC</h1>
    <div class="data_in">
        <span class="inputs">
            <input type="number" @bind="Altura" id="in_altura" placeholder="Altura">
            <input type="number" @bind="Peso" id="in_peso" placeholder="Peso">            
        </span>
        <select @bind="Sexo" id="in_sexo">
            <option value="" disabled selected>Sexo</option>
            <option value="masculino">Masculino</option>
            <option value="feminino">Feminino</option>
        </select>
        <label class="in_check">
            <input type="checkbox" @bind="Over65" id="in_65">
            Eu tenho 65 anos ou mais
        </label>
    </div>
    <div class="btn_area">
    <ButtonComponent Label="Calcular meu IMC" Primary="true" @onclick="HandleCalcularIMC" />
    <ButtonComponent Label="Entenda o cálculo" Primary="false" @onclick="OpenModal" />
    </div>

<div id="modal" style="display: none;">
    <button id="close-modal" @click="CloseModal">&times;</button>
    <h5>O IMC é calculado da seguinnte forma:</h5>
    <p>IMC = peso / (altura x altura) (kg/m2)</p>
</div>

<script>
    window.openModal = function () {
        // Exibe modal
        const modal = document.getElementById('modal');
        modal.style.display = 'block';
    };

    window.closeModal = function () {
        // Hide modal
        const modal = document.getElementById('modal');
        modal.style.display = 'none';
    };

    document.getElementById('close-modal').onclick = function () {
        closeModal();
    };

</script>


@code {

    [Inject] IJSRuntime JSRuntime { get; set; }
    private async Task OpenModal()
    {
        await JSRuntime.InvokeVoidAsync("openModal");
    }
    private async Task CloseModal()
    {
        await JSRuntime.InvokeVoidAsync("closeModal");
    }


    [Inject] protected ILocalStorageService LocalStorage { get; set; }
    private string Altura { get; set; }
    private string Peso { get; set; }
    private string Sexo { get; set; }
    private bool Over65 { get; set; } = false;
    private double Imc { get; set; }

    [Inject] NavigationManager Navigation { get; set; }
    private void HandleCalcularIMC()
    {
        CalcularIMC();
        Navigation.NavigateTo("Result");
    }


    private void CalcularIMC()
    {
        double Imc;
        // IMC = peso / (altura x altura) (kg/m2)

        // Filtro de Altura
        string alturaInput = Altura.Replace(',', '.'); // Substitui vírgula por ponto, se necessário
        alturaInput = alturaInput.Replace("m", ""); // Remove "m", se presente
        alturaInput = alturaInput.Trim(); // Remove espaços em branco

        // Filtro de Peso
        string pesoInput = Peso.Replace(',', '.'); // Substitui vírgula por ponto, se necessário
        pesoInput = pesoInput.Trim(); // Remove espaços em branco

        // Modificar valores como 190 para 1.90, se necessário
        if (alturaInput.Length == 3) // Verifica se o comprimento é 3 (ex: 190)
        {
            alturaInput = alturaInput.Insert(1, "."); // Insere um ponto após o primeiro dígito
        }

        if (double.TryParse(alturaInput, NumberStyles.Any, CultureInfo.InvariantCulture, out double altura)
            && double.TryParse(pesoInput, NumberStyles.Any, CultureInfo.InvariantCulture, out double peso))
        {
            Imc = peso / (altura * altura);

            if (string.IsNullOrEmpty(Sexo))
            {
                Sexo = "default";
            }

            string[] imcDataArray = new string[] { Imc.ToString("F1", CultureInfo.InvariantCulture), Sexo, Over65.ToString() };
            LocalStorage.SetItem("IMCResult", imcDataArray);
        }
        else
        {
            throw new Exception("Erro ao calcular o IMC. Verifique os valores de altura e peso.");
        }
    }



}

    